// Header files
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <pthread.h>

#define PORT 8080
#define MAX_PRODUCTS 20
#define MAX_CLIENTS 5
#define MAX_ORDERS 10

// Struct for products
typedef struct {
    char description[50];
    double price;
    int item_count;
    int total_requests;
    int total_sold;
    char not_served[100][50];
    int not_served_count;
} Product;

Product catalog[MAX_PRODUCTS];
pthread_mutex_t lock;
int total_orders = 0, successful_orders = 0, failed_orders = 0;
double total_revenue = 0.0;

void initialize_catalog() {
    for (int i = 0; i < MAX_PRODUCTS; i++) {
        sprintf(catalog[i].description, "Product_%d", i);
        catalog[i].price = (i + 1) * 10.0;
        catalog[i].item_count = 2;
        catalog[i].total_requests = 0;
        catalog[i].total_sold = 0;
        catalog[i].not_served_count = 0;
    }
}

void handle_order(int client_socket) {
    int product_id;
    char client_name[50];
    read(client_socket, client_name, sizeof(client_name));
    read(client_socket, &product_id, sizeof(product_id));

    pthread_mutex_lock(&lock);
    catalog[product_id].total_requests++;
    total_orders++;

    if (catalog[product_id].item_count > 0) {
        catalog[product_id].item_count--;
        catalog[product_id].total_sold++;
        successful_orders++;
        total_revenue += catalog[product_id].price;

        char success_msg[100];
        sprintf(success_msg, "Order successful for %s: %s (%.2f)", client_name, catalog[product_id].description, catalog[product_id].price);
        write(client_socket, success_msg, sizeof(success_msg));
    } else {
        strcpy(catalog[product_id].not_served[catalog[product_id].not_served_count++], client_name);
        failed_orders++;

        char failure_msg[100];
        sprintf(failure_msg, "Order failed for %s: %s is out of stock", client_name, catalog[product_id].description);
        write(client_socket, failure_msg, sizeof(failure_msg));
    }
    pthread_mutex_unlock(&lock);

    sleep(1); // Processing time
    close(client_socket);
}

void generate_report() {
    printf("\nE-shop Report:\n");
    for (int i = 0; i < MAX_PRODUCTS; i++) {
        printf("Product: %s\n", catalog[i].description);
        printf("  Total Requests: %d\n", catalog[i].total_requests);
        printf("  Total Sold: %d\n", catalog[i].total_sold);
        if (catalog[i].not_served_count > 0) {
            printf("  Not Served: ");
            for (int j = 0; j < catalog[i].not_served_count; j++) {
                printf("%s ", catalog[i].not_served[j]);
            }
            printf("\n");
        }
    }
    printf("\nSummary:\n");
    printf("  Total Orders: %d\n", total_orders);
    printf("  Successful Orders: %d\n", successful_orders);
    printf("  Failed Orders: %d\n", failed_orders);
    printf("  Total Revenue: %.2f\n", total_revenue);
}

int main() {
    int server_fd, client_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    pthread_mutex_init(&lock, NULL);
    initialize_catalog();

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Start listening for connections
    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("listen failed");
        exit(EXIT_FAILURE);
    }

    printf("E-shop server is running...\n");

    while (1) {
        if ((client_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("accept failed");
            continue;
        }
        handle_order(client_socket);
    }

    close(server_fd);
    pthread_mutex_destroy(&lock);
    generate_report();
    return 0;
}

